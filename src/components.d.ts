/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IMenuItemProps } from "./components/xy-editor/components/xy-button-menu/xy-button-menu";
import { Editor } from "@tiptap/core";
export { IMenuItemProps } from "./components/xy-editor/components/xy-button-menu/xy-button-menu";
export { Editor } from "@tiptap/core";
export namespace Components {
    interface XyButtonMenu {
        "menuData": IMenuItemProps;
    }
    interface XyDropLink {
        "attrs": any;
        "command"?: (params: { href: string; target: string }) => void;
        "href": string;
        "target": string;
    }
    interface XyEditor {
        "bubbleBar": string[];
        "content": string;
        "excludeBar": string[];
        "extensions": any[];
        "language": string;
        "menuBar": string[];
        "placeholder": string;
        "theme": string;
    }
    interface XyIcon {
        "height"?: string | number;
        "name"?: string;
        "width"?: string | number;
    }
    interface XyMenuBar {
        "editor": Editor | null;
        "menuBar"?: string[];
    }
}
export interface XyButtonMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXyButtonMenuElement;
}
declare global {
    interface HTMLXyButtonMenuElementEventMap {
        "handleCommand": any;
    }
    interface HTMLXyButtonMenuElement extends Components.XyButtonMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXyButtonMenuElementEventMap>(type: K, listener: (this: HTMLXyButtonMenuElement, ev: XyButtonMenuCustomEvent<HTMLXyButtonMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXyButtonMenuElementEventMap>(type: K, listener: (this: HTMLXyButtonMenuElement, ev: XyButtonMenuCustomEvent<HTMLXyButtonMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXyButtonMenuElement: {
        prototype: HTMLXyButtonMenuElement;
        new (): HTMLXyButtonMenuElement;
    };
    interface HTMLXyDropLinkElement extends Components.XyDropLink, HTMLStencilElement {
    }
    var HTMLXyDropLinkElement: {
        prototype: HTMLXyDropLinkElement;
        new (): HTMLXyDropLinkElement;
    };
    interface HTMLXyEditorElement extends Components.XyEditor, HTMLStencilElement {
    }
    var HTMLXyEditorElement: {
        prototype: HTMLXyEditorElement;
        new (): HTMLXyEditorElement;
    };
    interface HTMLXyIconElement extends Components.XyIcon, HTMLStencilElement {
    }
    var HTMLXyIconElement: {
        prototype: HTMLXyIconElement;
        new (): HTMLXyIconElement;
    };
    interface HTMLXyMenuBarElement extends Components.XyMenuBar, HTMLStencilElement {
    }
    var HTMLXyMenuBarElement: {
        prototype: HTMLXyMenuBarElement;
        new (): HTMLXyMenuBarElement;
    };
    interface HTMLElementTagNameMap {
        "xy-button-menu": HTMLXyButtonMenuElement;
        "xy-drop-link": HTMLXyDropLinkElement;
        "xy-editor": HTMLXyEditorElement;
        "xy-icon": HTMLXyIconElement;
        "xy-menu-bar": HTMLXyMenuBarElement;
    }
}
declare namespace LocalJSX {
    interface XyButtonMenu {
        "menuData"?: IMenuItemProps;
        "onHandleCommand"?: (event: XyButtonMenuCustomEvent<any>) => void;
    }
    interface XyDropLink {
        "attrs"?: any;
        "command"?: (params: { href: string; target: string }) => void;
        "href"?: string;
        "target"?: string;
    }
    interface XyEditor {
        "bubbleBar"?: string[];
        "content"?: string;
        "excludeBar"?: string[];
        "extensions"?: any[];
        "language"?: string;
        "menuBar"?: string[];
        "placeholder"?: string;
        "theme"?: string;
    }
    interface XyIcon {
        "height"?: string | number;
        "name"?: string;
        "width"?: string | number;
    }
    interface XyMenuBar {
        "editor"?: Editor | null;
        "menuBar"?: string[];
    }
    interface IntrinsicElements {
        "xy-button-menu": XyButtonMenu;
        "xy-drop-link": XyDropLink;
        "xy-editor": XyEditor;
        "xy-icon": XyIcon;
        "xy-menu-bar": XyMenuBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xy-button-menu": LocalJSX.XyButtonMenu & JSXBase.HTMLAttributes<HTMLXyButtonMenuElement>;
            "xy-drop-link": LocalJSX.XyDropLink & JSXBase.HTMLAttributes<HTMLXyDropLinkElement>;
            "xy-editor": LocalJSX.XyEditor & JSXBase.HTMLAttributes<HTMLXyEditorElement>;
            "xy-icon": LocalJSX.XyIcon & JSXBase.HTMLAttributes<HTMLXyIconElement>;
            "xy-menu-bar": LocalJSX.XyMenuBar & JSXBase.HTMLAttributes<HTMLXyMenuBarElement>;
        }
    }
}
