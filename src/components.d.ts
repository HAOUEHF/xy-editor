/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IMenuItemProps } from "./components/xy-editor/components/xy-button-menu/xy-button-menu";
import { Editor } from "@tiptap/core";
import { XYMenuBarItem } from "./types/XYButtonMenu";
import { Placement } from "@floating-ui/dom";
export { IMenuItemProps } from "./components/xy-editor/components/xy-button-menu/xy-button-menu";
export { Editor } from "@tiptap/core";
export { XYMenuBarItem } from "./types/XYButtonMenu";
export { Placement } from "@floating-ui/dom";
export namespace Components {
    interface XyButtonMenu {
        "menuData": IMenuItemProps;
    }
    interface XyColorPicker {
        "attrs": any;
        "color": Object | string;
        "presetColors": Array<string>;
    }
    interface XyDropLink {
        "attrs": | (XYMenuBarItem & {
        href: string
        target: string
        rel: string
      })
    | null;
    }
    interface XyEditor {
        "bubbleBar": string[];
        "content": string;
        "excludeBar": string[];
        "extensions": any[];
        "language": string;
        "menuBar": string[];
        "placeholder": string;
        "theme": string;
    }
    interface XyIcon {
        "height"?: string | number;
        "name"?: string;
        "width"?: string | number;
    }
    interface XyMenuBar {
        "editor": Editor | null;
        "menuBar"?: string[];
    }
    interface XyPopover {
        "initialOpen": boolean;
        "modal": boolean;
        "placement": Placement;
        "trigger": 'click' | 'hover';
    }
    interface XySelect {
        "activeValue": any;
        "attrs": any;
        "disabled": boolean;
        "groupField": string;
        "groupLabel": string;
    }
}
export interface XyButtonMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXyButtonMenuElement;
}
export interface XyColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLXyColorPickerElement;
}
declare global {
    interface HTMLXyButtonMenuElementEventMap {
        "handleCommand": any;
    }
    interface HTMLXyButtonMenuElement extends Components.XyButtonMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXyButtonMenuElementEventMap>(type: K, listener: (this: HTMLXyButtonMenuElement, ev: XyButtonMenuCustomEvent<HTMLXyButtonMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXyButtonMenuElementEventMap>(type: K, listener: (this: HTMLXyButtonMenuElement, ev: XyButtonMenuCustomEvent<HTMLXyButtonMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXyButtonMenuElement: {
        prototype: HTMLXyButtonMenuElement;
        new (): HTMLXyButtonMenuElement;
    };
    interface HTMLXyColorPickerElementEventMap {
        "colorChange": {
    r: number
    g: number
    b: number
    a: number
  };
    }
    interface HTMLXyColorPickerElement extends Components.XyColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLXyColorPickerElementEventMap>(type: K, listener: (this: HTMLXyColorPickerElement, ev: XyColorPickerCustomEvent<HTMLXyColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLXyColorPickerElementEventMap>(type: K, listener: (this: HTMLXyColorPickerElement, ev: XyColorPickerCustomEvent<HTMLXyColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLXyColorPickerElement: {
        prototype: HTMLXyColorPickerElement;
        new (): HTMLXyColorPickerElement;
    };
    interface HTMLXyDropLinkElement extends Components.XyDropLink, HTMLStencilElement {
    }
    var HTMLXyDropLinkElement: {
        prototype: HTMLXyDropLinkElement;
        new (): HTMLXyDropLinkElement;
    };
    interface HTMLXyEditorElement extends Components.XyEditor, HTMLStencilElement {
    }
    var HTMLXyEditorElement: {
        prototype: HTMLXyEditorElement;
        new (): HTMLXyEditorElement;
    };
    interface HTMLXyIconElement extends Components.XyIcon, HTMLStencilElement {
    }
    var HTMLXyIconElement: {
        prototype: HTMLXyIconElement;
        new (): HTMLXyIconElement;
    };
    interface HTMLXyMenuBarElement extends Components.XyMenuBar, HTMLStencilElement {
    }
    var HTMLXyMenuBarElement: {
        prototype: HTMLXyMenuBarElement;
        new (): HTMLXyMenuBarElement;
    };
    interface HTMLXyPopoverElement extends Components.XyPopover, HTMLStencilElement {
    }
    var HTMLXyPopoverElement: {
        prototype: HTMLXyPopoverElement;
        new (): HTMLXyPopoverElement;
    };
    interface HTMLXySelectElement extends Components.XySelect, HTMLStencilElement {
    }
    var HTMLXySelectElement: {
        prototype: HTMLXySelectElement;
        new (): HTMLXySelectElement;
    };
    interface HTMLElementTagNameMap {
        "xy-button-menu": HTMLXyButtonMenuElement;
        "xy-color-picker": HTMLXyColorPickerElement;
        "xy-drop-link": HTMLXyDropLinkElement;
        "xy-editor": HTMLXyEditorElement;
        "xy-icon": HTMLXyIconElement;
        "xy-menu-bar": HTMLXyMenuBarElement;
        "xy-popover": HTMLXyPopoverElement;
        "xy-select": HTMLXySelectElement;
    }
}
declare namespace LocalJSX {
    interface XyButtonMenu {
        "menuData"?: IMenuItemProps;
        "onHandleCommand"?: (event: XyButtonMenuCustomEvent<any>) => void;
    }
    interface XyColorPicker {
        "attrs"?: any;
        "color"?: Object | string;
        "onColorChange"?: (event: XyColorPickerCustomEvent<{
    r: number
    g: number
    b: number
    a: number
  }>) => void;
        "presetColors"?: Array<string>;
    }
    interface XyDropLink {
        "attrs"?: | (XYMenuBarItem & {
        href: string
        target: string
        rel: string
      })
    | null;
    }
    interface XyEditor {
        "bubbleBar"?: string[];
        "content"?: string;
        "excludeBar"?: string[];
        "extensions"?: any[];
        "language"?: string;
        "menuBar"?: string[];
        "placeholder"?: string;
        "theme"?: string;
    }
    interface XyIcon {
        "height"?: string | number;
        "name"?: string;
        "width"?: string | number;
    }
    interface XyMenuBar {
        "editor"?: Editor | null;
        "menuBar"?: string[];
    }
    interface XyPopover {
        "initialOpen"?: boolean;
        "modal"?: boolean;
        "placement"?: Placement;
        "trigger"?: 'click' | 'hover';
    }
    interface XySelect {
        "activeValue"?: any;
        "attrs"?: any;
        "disabled"?: boolean;
        "groupField"?: string;
        "groupLabel"?: string;
    }
    interface IntrinsicElements {
        "xy-button-menu": XyButtonMenu;
        "xy-color-picker": XyColorPicker;
        "xy-drop-link": XyDropLink;
        "xy-editor": XyEditor;
        "xy-icon": XyIcon;
        "xy-menu-bar": XyMenuBar;
        "xy-popover": XyPopover;
        "xy-select": XySelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "xy-button-menu": LocalJSX.XyButtonMenu & JSXBase.HTMLAttributes<HTMLXyButtonMenuElement>;
            "xy-color-picker": LocalJSX.XyColorPicker & JSXBase.HTMLAttributes<HTMLXyColorPickerElement>;
            "xy-drop-link": LocalJSX.XyDropLink & JSXBase.HTMLAttributes<HTMLXyDropLinkElement>;
            "xy-editor": LocalJSX.XyEditor & JSXBase.HTMLAttributes<HTMLXyEditorElement>;
            "xy-icon": LocalJSX.XyIcon & JSXBase.HTMLAttributes<HTMLXyIconElement>;
            "xy-menu-bar": LocalJSX.XyMenuBar & JSXBase.HTMLAttributes<HTMLXyMenuBarElement>;
            "xy-popover": LocalJSX.XyPopover & JSXBase.HTMLAttributes<HTMLXyPopoverElement>;
            "xy-select": LocalJSX.XySelect & JSXBase.HTMLAttributes<HTMLXySelectElement>;
        }
    }
}
